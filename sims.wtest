import sims.*
import personalidades.*
import trabajos.*
import tiposDeTrabajo.*
import estadosDeAnimo.*

//assert.equals( A, a probar que es A)
//assert.that(algo que esperamos V)
//assert.notThat(algo que esperamos F)

object fixture{
	method unSimSinAmigos(){
		return new Sim(true, 20, 100, [], buenazo, 0, false, medico)
	}
	
	method unSimInteresado(){
		return new Sim(true, 32, 60, [], interesado, 100, false, empresario)
	}
	
	method unSimBuenazo(){
		return new Sim(false, 15, 90, [], buenazo, 50, true, bailarin)
	}
	
	method unSimSuperficial(){
		return new Sim(false, 34, 80, [], superficial, 80, true, medico)
	}
	
	method unSimPeleadoConLaVida(){
		return new Sim(true, 55, 10, [], peleadoConLaVida, 20, false, empresario)
	}
	
	method unSimConAmigos(){
		return new Sim(true, 34, 100, [self.unSimSuperficial(), self.unSimBuenazo(), self.unSimSinAmigos(), self.unSimInteresado()], buenazo, 40, false, bailarin)
	}
	
	method unSimConOtrosAmigos(){
		return new Sim(false, 34, 100, [self.unSimBuenazo()], buenazo, 40, true, bailarin)
	}
	
	method unSimMasPopularQueSusAmigos(){
		return new Sim(true, 20, 100, [self.unSimSuperficial(), self.unSimSuperficial(), self.unSimSuperficial()], buenazo, 40, false, medico)
	}
	
	method unSimConPopularidad20(){
		return new Sim(true, 55, 10, [self.unSimPeleadoConLaVida(), self.unSimPeleadoConLaVida()], peleadoConLaVida, 20, false, medico)
	}
	
	method unSimConFelicidad100(){
		return new Sim(true, 55, 100, [], buenazo, 20, false, empresario)
	}
	
	method unSimVaronQueLeAtraenMujeres(){
		return new Sim(true, 0, 0, [self.unSimConFelicidad100()], buenazo, 0, false, bailarin)
	}
	
	method unSimMujerQueLeAtraenVarones(){
		return new Sim(false, 0, 0, [], buenazo, 0, true, medico)
	}
	
	method unSimConPlata(){
		return new Sim(false, 0, 0, [], peleadoConLaVida, 1000000, true, empresario)
	}
	
	method unSimPobre(){
		return new Sim(false, 0, 0, [], buenazo, 1, true, bailarin)
	}
	
	method unSimDeFelicidad199(){
		return new Sim(false, 0, 199, [], buenazo, 1, true, medico)
	}
	
	method unSimConAmigosNumeros(){
		return new Sim(false, 0, 0, [1,2,3], buenazo, 1, true, empresario)
	}
	
	method unSimConAmigosOtrosNumeros(){
		return new Sim(true, 0, 0, [3, 4], buenazo, 1, false, bailarin)
	}
}

test "Valora bien el amigo interesado"{
	var unSim = fixture.unSimConAmigos()
	assert.equals(23, interesado.obtenerValoracionDeAlguien(unSim))
}

test "Valora bien el amigo superficial"{
	var unSim = fixture.unSimConPopularidad20()
	assert.equals(400, superficial.obtenerValoracionDeAlguien(unSim))
}

test "Valora bien el amigo buenazo"{
	var unSim = fixture.unSimConFelicidad100()
	assert.equals(50, buenazo.obtenerValoracionDeAlguien(unSim))
}

test "Valora bien el amigo peleadoConLaVida"{
	var unSim = fixture.unSimSinAmigos()
	assert.equals(0, peleadoConLaVida.obtenerValoracionDeAlguien(unSim))
}

test "Agrego un amigo a un sim y este esta en su lista de amigos"{
	var simSolitario = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimInteresado()
	simSolitario.agregarAmigo(otroSim)
	assert.that(simSolitario.esAmigoDe(otroSim))
}
test "Agrego un amigo a un sim y su felicidad sube segun la valoracion del amigo"{
	var simSolitario = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimConFelicidad100()
	simSolitario.agregarAmigo(otroSim)
	assert.equals(150, simSolitario.nivelDeFelicidad())
}

test "Calcula bien la cantidad de amigos que tiene un sim"{
	var simConAmigos = fixture.unSimConAmigos()
	assert.equals(4 , simConAmigos.cantidadDeAmigosQueTiene())
}

test "A un sim le atrae otro si es del sexo de su preferencia"{
	var unSimVaron = fixture.unSimVaronQueLeAtraenMujeres()
	var otroSimMujer = fixture.unSimMujerQueLeAtraenVarones()
	assert.that(unSimVaron.esDelSexoDeSuPreferencia(otroSimMujer))
}

test "A un sim interesado le atrae otro si duplica su fortuna"{
	var unSimRico = fixture.unSimConPlata()
	var otroSimPobre = fixture.unSimPobre()
	assert.that(interesado.leAtrae(unSimRico, otroSimPobre))
}

test "A un sim superficial le atrae otro si tiene mas o igual popularidad"{
	var unSimConPopularidad = fixture.unSimConAmigos()
	var otroSimSinPopularidad = fixture.unSimPobre()
	assert.that(interesado.leAtrae(unSimConPopularidad, otroSimSinPopularidad))
}

test "A un sim buenazo le atrae otro"{
	var unSim = fixture.unSimConAmigos()
	var otroSim = fixture.unSimPobre()
	assert.that(buenazo.leGusta(unSim, otroSim))
}

test "A un sim peleado con la vida le atrae otro si el otro tiene menos de 200 de felicidad"{
	var unSim = fixture.unSimConAmigos()
	var unSimTriste = fixture.unSimDeFelicidad199()
	assert.that(buenazo.leGusta(unSimTriste, unSim))
}

test "Si un sim se pone en pareja, suPareja es el sim con que se relaciona"{
	var unSim = fixture.unSimBuenazo()
	var unSimPareja = fixture.unSimSinAmigos()
	unSim.enRelacionCon(unSimPareja)
	assert.equals(unSimPareja, unSim.suPareja())
}

test "Si un sim se pone en pareja, cambia de la pareja el atributo suPareja con el sim que se relaciona"{
	var unSim = fixture.unSimBuenazo()
	var unSimPareja = fixture.unSimSinAmigos()
	unSim.enRelacionCon(unSimPareja)
	assert.equals(unSim, unSimPareja.suPareja())
}

test "Si no se atraen, no se ponen en pareja"{
	var unSim = fixture.unSimInteresado()
	var unSimPareja = fixture.unSimPeleadoConLaVida()
	unSim.enRelacionCon(unSimPareja)
	assert.notThat(unSimPareja.estaEnPareja())
}

test "Si no son del sexo de su preferencia, no se ponen en pareja"{
	var unSim = fixture.unSimVaronQueLeAtraenMujeres()
	var unSimPareja = fixture.unSimVaronQueLeAtraenMujeres()
	unSim.enRelacionCon(unSimPareja)
	assert.notThat(unSimPareja.estaEnPareja())
}

test "No se agrega un conocimiento que ya tiene el sim"{
	var unSim = fixture.unSimBuenazo()
	unSim.agregarConocimiento("un conocimiento")
	unSim.agregarConocimiento("un conocimiento")
	assert.equals(["un conocimiento"], unSim.conocimiento())
}

//REQUERIMIENTOS DEL TP

//1
test "El abrazo comun aumenta la felicidad del dador en 2"{
	var simFeliz = fixture.unSimConFelicidad100()
	var otroSim = fixture.unSimSinAmigos()
	simFeliz.darAbrazoComunA(otroSim)
	assert.equals(102, simFeliz.nivelDeFelicidad())
}

test "El abrazo comun aumenta la felicidad del que recibe en 4"{
	var simFeliz = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimConFelicidad100()
	simFeliz.darAbrazoComunA(otroSim)
	assert.equals(104, otroSim.nivelDeFelicidad())
}
test "Hacer que un sim abrace prolongado a otro"{
	var unSim = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimInteresado()
	unSim.darAbrazoProlongadoA(otroSim)
    assert.equals(incomodidad, otroSim.estadoDeAnimo())	
}

//2
test "Saber cuanto valora un Sim a otro"{
	var unSim = fixture.unSimConPopularidad20()
	var otroSim = fixture.unSimBuenazo()
    assert.equals(0, unSim.personalidad().obtenerValoracionDeAlguien(otroSim))
}

//3
test "Conocer el amigo que mas valora un sim"{
	var unSim = fixture.unSimSinAmigos()
	var unAmigoSim = fixture.unSimConOtrosAmigos()
	var amigoSim = fixture.unSimSuperficial()
	var otroAmigoSim = fixture.unSimBuenazo() 
	unSim.agregarAmigo(unAmigoSim)
	unSim.agregarAmigo(amigoSim)
	unSim.agregarAmigo(otroAmigoSim)
	assert.equals(unAmigoSim, unSim.amigoAQuienMasValora())
}

//4
test "Agrego un amigo a un sim y aumenta cantidad de lista de amigos"{
	var simSolitario = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimInteresado()
	simSolitario.agregarAmigo(otroSim)
	assert.equals(1, simSolitario.listaDeAmigos().size())
}

//5
test "Hacer que dos Sims se hagan amigos entre sí"{
	var unSim = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimInteresado()
        unSim.agregarAmigo(otroSim)
        otroSim.agregarAmigo(unSim)
        assert.that(unSim.esAmigoDe(otroSim))
        assert.that(otroSim.esAmigoDe(unSim))
}

//6
test "Saber si un Sim es amigo de otro"{
	var unSim = fixture.unSimSinAmigos()
	var otroSim = fixture.unSimInteresado()
        unSim.agregarAmigo(otroSim)
        assert.that(unSim.esAmigoDe(otroSim))
}

//7
test "Consulta los primeros 4 amigos que agregó"{
	var unSim = fixture.unSimBuenazo()
	var primerAmigo = fixture.unSimConPlata()
	var segundoAmigo = fixture.unSimInteresado()
	var tercerAmigo = fixture.unSimPobre()
	var cuartoAmigo = fixture.unSimSinAmigos()
	unSim.agregarAmigo(primerAmigo)
	unSim.agregarAmigo(segundoAmigo)
	unSim.agregarAmigo(tercerAmigo)
	unSim.agregarAmigo(cuartoAmigo)
	assert.equals([primerAmigo, segundoAmigo, tercerAmigo, cuartoAmigo], unSim.listaDeAmigos().take(4))
}

//8
test "Consulta los ultimos 4 amigos que agregó"{
	var unSim = fixture.unSimConAmigos()
	var unAmigo = fixture.unSimConPlata()
	var otroAmigo = fixture.unSimInteresado()
	var tercerAmigo = fixture.unSimPobre()
	var cuartoAmigo = fixture.unSimSinAmigos()
	unSim.agregarAmigo(unAmigo)
	unSim.agregarAmigo(otroAmigo)
	unSim.agregarAmigo(tercerAmigo)
	unSim.agregarAmigo(cuartoAmigo)
	var anteAntePenultimoAmigo = unSim.listaDeAmigos().get(unSim.cantidadDeAmigosQueTiene() - 4)
	var antePenultimoAmigo = unSim.listaDeAmigos().get(unSim.cantidadDeAmigosQueTiene() - 3)
	var penultimoAmigo = unSim.listaDeAmigos().get(unSim.cantidadDeAmigosQueTiene() - 2)
	var ultimoAmigo = unSim.listaDeAmigos().get(unSim.cantidadDeAmigosQueTiene() - 1)
	var ultimos4Amigos = [anteAntePenultimoAmigo, antePenultimoAmigo, penultimoAmigo, ultimoAmigo]
	assert.equals([unAmigo, otroAmigo, tercerAmigo, cuartoAmigo], ultimos4Amigos)
}

//9
test "Calcula bien la popularidad de un sim"{
	var unSim = fixture.unSimConPopularidad20()
	assert.equals(20, unSim.popularidad())
}

//10
test "Es el mas popular de su lista de amigos"{
	var unSim = fixture.unSimConAmigos()
	assert.that(unSim.esElMasPopularDeSusAmigos())
}

//11 y 12
test "Si un sim se ponen en pareja, estado en pareja cambia a true"{
	var unSim = fixture.unSimBuenazo()
	var unSimPareja = fixture.unSimSinAmigos()
	unSim.enRelacionCon(unSimPareja)
	assert.that(unSim.estaEnPareja())
}

test "Si un sim se pone en pareja, estado de enPareja de la pareja cambia a true"{
	var unSim = fixture.unSimBuenazo()
	var unSimPareja = fixture.unSimSinAmigos()
	unSim.enRelacionCon(unSimPareja)
	assert.that(unSimPareja.estaEnPareja())
}

//13, 14 y 18
test "Si entre dos sims se pudre todo, quedan sin pareja"{
	var unSim = fixture.unSimVaronQueLeAtraenMujeres()
	var unSimPareja = fixture.unSimMujerQueLeAtraenVarones()
	unSim.enRelacionCon(unSimPareja)
	unSim.sePudreTodoConSuPareja()
	assert.notThat(unSim.estaEnPareja())
}

//15
test "Si dos sims se ponen en parejas, los amigos del primero son los de el mas los de la pareja"{
	var unSim = fixture.unSimSinAmigos()
	var unSimPareja = fixture.unSimBuenazo()
	var amigoSim = fixture.unSimSuperficial()
	var otroAmigoSim = fixture.unSimInteresado() 
	var amigoDeLaPareja = fixture.unSimConAmigos()
	unSim.agregarAmigo(amigoSim)
	unSim.agregarAmigo(otroAmigoSim)
	unSimPareja.agregarAmigo(amigoDeLaPareja)
	unSimPareja.agregarAmigo(otroAmigoSim)
	unSim.enRelacionCon(unSimPareja)
	assert.equals([amigoSim, otroAmigoSim, amigoDeLaPareja], unSim.listaDeAmigos())
}

//16
test "Si se ponen en pareja, conocer los nombres de la relacion"{
	var unSim = fixture.unSimVaronQueLeAtraenMujeres()
	var unSimPareja = fixture.unSimMujerQueLeAtraenVarones()
	unSim.enRelacionCon(unSimPareja)
	assert.equals([unSim, unSimPareja], unSim.simsEnPareja())
}

//17
test "Si funciona la relacion, entonces no se pudre todo"{
	var unSim = fixture.unSimBuenazo()
	var unSimPareja = fixture.unSimSinAmigos()
	unSim.enRelacionCon(unSimPareja)
	unSim.sePudreTodoConSuPareja()
	assert.that(unSim.estaEnPareja())
}

//19
test "Si se pelean, pero se atraen, comienzan de vuelta una relacion"{
	var unSim = fixture.unSimVaronQueLeAtraenMujeres()
	var unSimPareja = fixture.unSimMujerQueLeAtraenVarones()
	unSim.enRelacionCon(unSimPareja)
	unSim.sePudreTodoConSuPareja()
	unSim.enRelacionCon(unSimPareja)
	assert.that(unSim.estaEnPareja())
}

//20
test "Saber si dos sims se atraen"{
	var unSim = fixture.unSimVaronQueLeAtraenMujeres()
	var otroSim = fixture.unSimMujerQueLeAtraenVarones()
	assert.that(unSim.leAtrae(otroSim))
}

//21
test "Si tengo una lista de sims, solo guardo los que me atraen"{
	var sim = fixture.unSimInteresado()
	var simConPlata = fixture.unSimConPlata()
	var simPobre = fixture.unSimPobre()
	var listaDeSims = [simConPlata, simPobre]
	assert.equals([simConPlata], listaDeSims.filter({unSim => sim.leAtrae(unSim)}))
}

//22
test "Se agrega un conocimiento nuevo al sim"{
	var unSim = fixture.unSimBuenazo()
	unSim.agregarConocimiento("un conocimiento")
	assert.equals(["un conocimiento"], unSim.conocimiento())
}

//23
test "Conocer la cantidad total de caracteres en su conocimiento"{
	var unSim = fixture.unSimBuenazo()
	unSim.agregarConocimiento("un conocimiento")
	unSim.agregarConocimiento("otro conocimiento")
	assert.equals(32, unSim.conocimientoTotal())
}

//24
test "Saber si tiene un conocimiento"{
	var unSim = fixture.unSimBuenazo()
	unSim.agregarConocimiento("un conocimiento")
	assert.that(unSim.conocimiento().contains("un conocimiento"))
}

//25
test "Si le agarra amnesia, se queda sin conocimientos"{
	var unSim = fixture.unSimBuenazo()
	unSim.agregarConocimiento("un conocimiento")
	unSim.leAgarraAmnesia()
	assert.that(unSim.conocimiento().isEmpty())
}

//26
test "Si asigno un estado de animo, el sim cambia de estado"{
	var unSim = fixture.unSimBuenazo()
	unSim.setEstadoDeAnimo(soniador)
	assert.equals(soniador, unSim.estadoDeAnimo())
}

//27
test "Hacer que un sim vuelva a la normalidad"{
	var unSim = fixture.unSimBuenazo()
	unSim.setEstadoDeAnimo(soniador)
	unSim.volverALaNormalidad()
	assert.equals(normal, unSim.estadoDeAnimo())
}

//28
test "Hacer que un sim se ponga celoso"{
	var unSim = fixture.unSimBuenazo()
	var otroSim = fixture.unSimConPlata()
	var simPobre = fixture.unSimPobre()
	unSim.agregarAmigo(otroSim)
	unSim.agregarAmigo(simPobre)
	unSim.ataqueDeCelosPorPlata()
	assert.equals([simPobre], unSim.listaDeAmigos())
}

//29
test "Un sim va a trabajar"{
	var unSim = fixture.unSimSuperficial()
	unSim.irATrabajar()
	assert.equals(110, unSim.nivelDeFelicidad())
}

//30
/* Los ataques de celos repiten mucha logica, se podría 
 * utilizar métodos con orden superior(pasar un método como parámetro)
 *  para resolver la situacion
 */